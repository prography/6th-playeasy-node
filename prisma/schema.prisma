generator client {
  provider = "prisma-client-js"
}

datasource mysql {
  url      = env("DB_URL")
  provider = "mysql"
}


enum MatchType {
  SOCCKER
  FUTSAL5 
  FUTSAL6
}

enum StatusType {
  WAITING
  CONFIRMED
  DENIED
  CANCEL
}

enum Level {
  HIGH
  MEDIUM
  LOW
}

model User {
  id              Int         @default(autoincrement()) @id
  name            String?   
  age             Int?      
  email           String      @unique
  socialType      String      @default("kakao") @map("social_type")
  phone           String?        
  pushToken       String?     @map("push_token")
  level           Level?      
  description     String?     
  picture         String?      
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime?   @updatedAt() @map("updated_at") 
  
  // User N : 1 Team
  team            Team?       @relation(fields: [teamId], references: [id])
  teamId          Int?        @map("team_id")

  // user 1 : N Match
  matches         Match[]

  // User 1 : N MatchUser
  matchUsers       MatchUserApplication[]

  @@map("user")
}
 
model Team {
  id              Int         @default(autoincrement()) @id
  name            String   
  description     String?
  age             Int?        
  level           Level?      
  leader          String?
  phone           String?
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime?   @updatedAt() @map("updated_at")

  // Team 1 : N User
  users           User[]

  // Team 1 : N Match
  matches          Match[]

  // Team 1 : N MatchTeamApplication
  matchTeams      MatchTeamApplication[]

  @@map("team")   
}

model Match {
  id                  Int         @default(autoincrement()) @id 
  type                MatchType 
  description         String?
  startAt             DateTime    @map("start_at")
  duration            Int?    
  fee                 Int?       
  phone               String?
  totalQuota          Int         @map("total_quota")
  status              StatusType  @default(value: WAITING)
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime?   @updatedAt() @map("updated_at")

  // Match N : 1 User
  writer              User        @relation(fields: [writerId], references: [id])
  writerId            Int         @map("writer_id")

  // Match N : 1 Team
  homeTeam            Team?       @relation( fields: [homeTeamId], references: [id]) 
  homeTeamId          Int?        @map("home_team_id")

  // Match 1 : 1 Location
  location            Location?   @relation(fields: [locationId], references: [id])
  locationId          Int?

  // Match 1 : N MatchUserApplication
  usersApplication    MatchUserApplication[]

  // Match 1 : N MatchTeamApplication
  teamsApplication    MatchTeamApplication[]
  
  @@map("match")
}

model Location {
  id              Int             @default(autoincrement()) @id
  latitude        Float         
  longitude       Float
  name            String
  address         String
  detail          String?
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime?       @updatedAt() @map("updated_at")

  @@map("location")
}

model MatchTeamApplication {
  id              Int             @default(autoincrement()) @id
  quota           Int             
  status          StatusType      @default(value: WAITING)
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime?       @updatedAt() @map("updated_at")

  // MatchTeamApplication N : 1 Match
  match           Match           @relation(fields: [matchId], references: [id])
  matchId         Int             @map("match_id")

  // MatchTeamApplication N : 1 Team
  team            Team            @relation(fields: [teamId], references: [id])
  teamId          Int             @map("team_id")


  @@map("match_team_application")
}

model MatchUserApplication {
  id              Int             @default(autoincrement()) @id
  status          StatusType  
  quota           Int             @default(value: 1)
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime?       @updatedAt() @map("updated_at")

  // MatchUserApplication N : 1 Match
  match           Match           @relation(fields: [matchId], references: [id])
  matchId         Int             @map("match_id")
  
  // MatchUserApplication N : 1 User
  user            User            @relation(fields: [userId], references: [id])
  userId          Int             @map("user_id")


  @@map("match_user_application")     
}